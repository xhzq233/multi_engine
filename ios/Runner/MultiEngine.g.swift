// Autogenerated from Pigeon (v22.4.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

private class MultiEnginePigeonCodecReader: FlutterStandardReader {
}

private class MultiEnginePigeonCodecWriter: FlutterStandardWriter {
}

private class MultiEnginePigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MultiEnginePigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MultiEnginePigeonCodecWriter(data: data)
  }
}

class MultiEnginePigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MultiEnginePigeonCodec(readerWriter: MultiEnginePigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MultiEngineApi {
  func spawnEngine(name: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MultiEngineApiSetup {
  static var codec: FlutterStandardMessageCodec { MultiEnginePigeonCodec.shared }
  /// Sets up an instance of `MultiEngineApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MultiEngineApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let spawnEngineChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.multi_engine.MultiEngineApi.spawnEngine\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      spawnEngineChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        do {
          try api.spawnEngine(name: nameArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      spawnEngineChannel.setMessageHandler(nil)
    }
  }
}
